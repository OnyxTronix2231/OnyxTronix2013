// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.AxisCamera;
import edu.wpi.first.wpilibj.vision.USBCamera;
import edu.wpi.first.wpilibj.vision.AxisCamera.Resolution;

import org.usfirst.frc2231.Robot2013.*;

import com.ni.vision.NIVision.CalibrationMode;

import FRC_Vision2016_newMethods_ft_team2231.VisionSensor;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon driveTrainFirstLeft;
    public static CANTalon driveTrainSecondLeft;
    public static CANTalon driveTrainFirstRight;
    public static CANTalon driveTrainSecondRight;
    public static RobotDrive driveTrainRobotDrive4;
    public static AnalogGyro driveTrainrotationGyro;
    public static AnalogPotentiometer shooterPitchPotentiometer;
    public static DoubleSolenoid shooterTriggerSolenoid;
    public static CANTalon shooterAimingMotor;
    public static CANTalon shooterShootingWheel;
    public static DoubleSolenoid climbingRightSolenoid;
    public static DoubleSolenoid climbingLeftSolenoid;
    public static Compressor climbingCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AxisCamera shooterCamera;
    public static USBCamera driveCamera;
    public static ADXRS450_Gyro visionGyro;
	// Vision PIDControllers
	public static PIDController VisionPIDController;
	// DriveTrain PIDControllers
	public static PIDController driveTrainLeftPIDController;
	public static PIDController driveTrainRightPIDController;
	public static VisionSensor visionSensor;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFirstLeft = new CANTalon(0);
        LiveWindow.addActuator("DriveTrain", "FirstLeft", driveTrainFirstLeft);
        
        driveTrainSecondLeft = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "SecondLeft", driveTrainSecondLeft);
        
        driveTrainFirstRight = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "FirstRight", driveTrainFirstRight);
        
        driveTrainSecondRight = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "SecondRight", driveTrainSecondRight);
        
        driveTrainRobotDrive4 = new RobotDrive(driveTrainFirstLeft, driveTrainSecondLeft,
              driveTrainFirstRight, driveTrainSecondRight);
        
        driveTrainRobotDrive4.setSafetyEnabled(true);
        driveTrainRobotDrive4.setExpiration(0.1);
        driveTrainRobotDrive4.setSensitivity(0.5);
        driveTrainRobotDrive4.setMaxOutput(1.0);

        driveTrainrotationGyro = new AnalogGyro(1);
        LiveWindow.addSensor("DriveTrain", "rotationGyro", driveTrainrotationGyro);
        driveTrainrotationGyro.setSensitivity(0.007);
        shooterPitchPotentiometer = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Shooter", "PitchPotentiometer", shooterPitchPotentiometer);
        
        shooterTriggerSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Shooter", "TriggerSolenoid", shooterTriggerSolenoid);
        
        shooterAimingMotor = new CANTalon(11);
        LiveWindow.addActuator("Shooter", "AimingMotor", shooterAimingMotor);
        
        shooterShootingWheel = new CANTalon(4);
        LiveWindow.addActuator("Shooter", "ShootingWheel", shooterShootingWheel);
        
        climbingRightSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Climbing", "RightSolenoid", climbingRightSolenoid);
        
        climbingLeftSolenoid = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Climbing", "LeftSolenoid", climbingLeftSolenoid);
        
        climbingCompressor = new Compressor(0);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        /********************************* Vision Camera ********************************/
        
        shooterCamera = new AxisCamera("10.22.31.12");
        shooterCamera.writeResolution(Resolution.k640x480);
        
        /********************************* Drive PID *********************************/
       
        /*
        driveTrainLeftPIDController = new PIDController(StaticMembers.ROBOTDRIVE_P, StaticMembers.ROBOTDRIVE_I,StaticMembers.ROBOTDRIVE_D, driveTrainSecondLeft, driveTrainSecondLeft);
        LiveWindow.addActuator("DriveTran", "SecondLeftPIDController", driveTrainLeftPIDController);
        driveTrainLeftPIDController.setContinuous(false);
        driveTrainLeftPIDController.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainLeftPIDController.setOutputRange(StaticMembers.OUT_PUT_RANGE_MIN, StaticMembers.OUT_PUT_RANGE_MAX);
        */
        
        driveTrainSecondRight.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightPIDController = new PIDController(StaticMembers.ROBOTDRIVE_P, StaticMembers.ROBOTDRIVE_I,StaticMembers.ROBOTDRIVE_D, driveTrainSecondRight, driveTrainSecondRight);
        LiveWindow.addActuator("DriveTran", "SecondRightPIDController", driveTrainRightPIDController);
        driveTrainRightPIDController.setContinuous(false);
        driveTrainRightPIDController.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainRightPIDController.setOutputRange(StaticMembers.OUT_PUT_RANGE_MIN, StaticMembers.OUT_PUT_RANGE_MAX);  
        
        /********************************* Vision PID *********************************/
        
        visionSensor = new VisionSensor(shooterCamera, Robot.vision.getAngleToFloor());

        
        VisionPIDController = new PIDController(StaticMembers.VISION_P, StaticMembers.VISION_I, StaticMembers.VISION_D, visionSensor, driveTrainFirstLeft);
        LiveWindow.addActuator("Vision", "LeftPIDController", VisionPIDController);
        VisionPIDController.setContinuous(false);
        VisionPIDController.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        VisionPIDController.setOutputRange(StaticMembers.OUT_PUT_RANGE_MIN, StaticMembers.OUT_PUT_RANGE_MAX);     
    }
}
