// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013.subsystems;

import org.usfirst.frc2231.Robot2013.OnyxCANTalon;
import org.usfirst.frc2231.Robot2013.RobotMap;
import org.usfirst.frc2231.Robot2013.commands.*;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static final double SENSITIVITY_VALUE = 0.15;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer pitchPotentiometer = RobotMap.shooterPitchPotentiometer;
    private final DoubleSolenoid triggerSolenoid = RobotMap.shooterTriggerSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private boolean isReady = false;
    public double speed = 1;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public OnyxCANTalon getShootingWheel() {
		return shootingWheel;
	}

	public void load(boolean isToLoad) {
    	if(isToLoad) {
    		triggerSolenoid.set(Value.kForward);
    	} else {
    		triggerSolenoid.set(Value.kReverse);
    	}
    }

	private void changePIDState(boolean isStart) {
		if(isStart) {
			shootingWheel.enable();
		} else {
			shootingWheel.disable();
		}
	}
	
	public boolean isReady(){
		return this.isReady;
	}
	
	public void setReady(boolean situation){
		this.isReady = situation;
	}
	
	public void spinWheelsAtSpeed(double speed) {
		double spinSpeed = speed > SENSITIVITY_VALUE ? speed : 0;
		shootingWheel.set(spinSpeed);
	}
	
	
}

