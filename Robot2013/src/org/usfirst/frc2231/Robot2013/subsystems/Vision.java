// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013.subsystems;

import org.usfirst.frc2231.Robot2013.RobotMap;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Vision extends Subsystem {
	
    protected boolean isProcessing = true;
    private double angleToFlour = 90-52.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private final CANTalon firstLeft = RobotMap.driveTrainFirstLeft;
    private final CANTalon secondLeft = RobotMap.driveTrainSecondLeft;
    private final CANTalon firstRight = RobotMap.driveTrainFirstRight;
    private final CANTalon secondRight = RobotMap.driveTrainSecondRight;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean isProcessing() {
		return isProcessing;
	}

	public void startProcessing() {
		this.isProcessing = true;
	}	
	
	public void stopProcessing() {
		this.isProcessing = false;
	}
	
	public void changeToFollowMode() {
		secondLeft.changeControlMode(TalonControlMode.Follower);
		firstRight.changeControlMode(TalonControlMode.Follower);
		secondRight.changeControlMode(TalonControlMode.Follower);
		
		secondLeft.set(firstLeft.getDeviceID());
		firstRight.set(firstLeft.getDeviceID());
		secondRight.set(firstLeft.getDeviceID());
	}
	
	//Because three talons follows one talon, one side of the robot drive needs to be inverted so the robot will be able to rotate.
	public void setInvertedTalons(boolean isInverted){ 
		firstRight.setInverted(isInverted);
		secondRight.setInverted(isInverted);
	}
	
	public double getAngleToFloor() {
		return angleToFlour;
//		return Math.acos(accelerometer.getY());
	}
}

