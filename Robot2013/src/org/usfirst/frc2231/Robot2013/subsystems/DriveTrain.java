// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013.subsystems;

import org.usfirst.frc2231.Robot2013.OnyxCANTalon;
import org.usfirst.frc2231.Robot2013.Robot;
import org.usfirst.frc2231.Robot2013.RobotMap;
import org.usfirst.frc2231.Robot2013.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private final double ROBOT_RADIUS = 35;
	private final double WHEEL_RADIUS = 3;
	private final double INCH = 2.54;
	public final double WHEEL_PERIMETER = WHEEL_RADIUS * INCH * 2 * Math.PI;
	public final double ROBOT_PERIMETER = ROBOT_RADIUS * INCH * 2 * Math.PI;
	private final int DEFAULT_POV_VALUE = -1;
	private final int PULSE_SCALE = 360;
	private final int  DIRECTION_VALUE = 1;
    private final OnyxCANTalon firstLeft = RobotMap.driveTrainFirstLeft;
    private final OnyxCANTalon secondLeft = RobotMap.driveTrainSecondLeft;
    private final OnyxCANTalon firstRight = RobotMap.driveTrainFirstRight;
    private final OnyxCANTalon secondRight = RobotMap.driveTrainSecondRight;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro rotationGyro = RobotMap.driveTrainrotationGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double currentAngle = 0;
    public boolean isStable;
	public int directionValue = 1;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void arcadeDrive(Joystick stick) {
		robotDrive41.arcadeDrive(
				-DIRECTION_VALUE * stick.getRawAxis(1),
				DIRECTION_VALUE * stick.getRawAxis(4));
	}
    
	public void driveByDirection(double degrees) {

		if (degrees != DEFAULT_POV_VALUE) {
			double move = getMove(degrees);
			double rotate = getRotate(degrees);
			robotDrive41.arcadeDrive(rotate, move);
		}
	}

	public double getRotate(double degrees) {
		int shift;
		double shiftedDegree;

		boolean signRotate = Math.floor(degrees / 180) % 2 == 0;
		shift = ((int) degrees) / 180;
		shiftedDegree = degrees - 180 * shift;
		if (signRotate) {
			return 1 - shiftedDegree / 90.0;
		} else {
			return -(1 - shiftedDegree / 90.0);
		}
	}

	public double getMove(double degrees) {
		return getRotate(degrees + 270.0);
	}
	
	/*Checks if the robot should turn either left or right*/
	public boolean isClockwiseRotationEfficient(double setpoint) { 
		if (setpoint - RobotMap.driveTrainFirstLeft.getPosition() > WHEEL_PERIMETER / 2) {
			return true;
		}
		return false;
	}

	private boolean isToleratable(boolean isLeft) {
		if(isLeft) {
//			leftPIDController.getSetpoint() - leftPIDController.
		} else {
		
		}
		return true;
	}
	
	public void driveByStraightPOVValue(double value) {
		int POV = Robot.oi.getdriveStick().getPOV();
		double moveValue = POV == -1 ? 0 : POV / 90 -1;  
		robotDrive41.arcadeDrive(moveValue , 0);
	}
	
	public boolean isStable(){
		isStable = this.currentAngle < rotationGyro.getAngle();
		Timer.delay(100);
		this.currentAngle = rotationGyro.getAngle();
		return isStable;	
	}

	public OnyxCANTalon getFirstLeft() {
		return firstLeft;
	}

	public OnyxCANTalon getSecondLeft() {
		return secondLeft;
	}

	public OnyxCANTalon getFirstRight() {
		return firstRight;
	}

	public OnyxCANTalon getSecondRight() {
		return secondRight;
	}
	
	
	//TODO: Add description to the code
	//TODO: Remove magic numbers
}

