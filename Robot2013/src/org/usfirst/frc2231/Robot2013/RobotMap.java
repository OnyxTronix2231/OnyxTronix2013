// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.AxisCamera;
import edu.wpi.first.wpilibj.vision.USBCamera;
import edu.wpi.first.wpilibj.vision.AxisCamera.Resolution;

import org.usfirst.frc2231.Robot2013.*;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro driveTrainrotationGyro;
    public static AnalogPotentiometer shooterPitchPotentiometer;
    public static DoubleSolenoid shooterTriggerSolenoid;
    public static DoubleSolenoid climbingRightSolenoid;
    public static DoubleSolenoid climbingLeftSolenoid;
    public static Compressor climbingCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static OnyxCANTalon shooterAimingMotor;
    public static OnyxCANTalon shooterShootingWheel;
    public static OnyxCANTalon driveTrainFirstLeft;
    public static OnyxCANTalon driveTrainSecondLeft;
    public static OnyxCANTalon driveTrainFirstRight;
    public static OnyxCANTalon driveTrainSecondRight;
    public static RobotDrive driveTrainRobotDrive41;
    public static AxisCamera shooterCamera;
    public static USBCamera driveCamera;
    public static ADXRS450_Gyro visionGyro;
	public static PIDController VisionFirstLeftPIDController;
	public static PIDController VisionSecondLeftPIDController;
	public static PIDController VisionFirstRightPIDController;
	public static PIDController VisionSecondRightPIDController;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainrotationGyro = new AnalogGyro(1);
        LiveWindow.addSensor("DriveTrain", "rotationGyro", driveTrainrotationGyro);
        driveTrainrotationGyro.setSensitivity(0.007);
        shooterPitchPotentiometer = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Shooter", "PitchPotentiometer", shooterPitchPotentiometer);
        
        shooterTriggerSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Shooter", "TriggerSolenoid", shooterTriggerSolenoid);
        
        climbingRightSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Climbing", "RightSolenoid", climbingRightSolenoid);
        
        climbingLeftSolenoid = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Climbing", "LeftSolenoid", climbingLeftSolenoid);
        
        climbingCompressor = new Compressor(0);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterCamera = new AxisCamera("10.22.31.12");
        shooterCamera.writeResolution(Resolution.k640x480);
        
        driveTrainFirstLeft = new OnyxCANTalon(0);
        driveTrainFirstLeft.setDistancePerPulse(StaticMembers.DISTANCE_PER_PULSE);
        driveTrainFirstLeft.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainFirstLeft.setPrecentTolerance(StaticMembers.PERCENT_TOLERANCE);
        LiveWindow.addActuator("DriveTrain", "FirstLeft", driveTrainFirstLeft);
        
        driveTrainSecondLeft = new OnyxCANTalon(1);
        driveTrainSecondLeft.setDistancePerPulse(StaticMembers.DISTANCE_PER_PULSE);
        driveTrainSecondLeft.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainSecondLeft.setPrecentTolerance(StaticMembers.PERCENT_TOLERANCE);
        LiveWindow.addActuator("DriveTrain", "SecondLeft", driveTrainSecondLeft);
        
        driveTrainFirstRight = new OnyxCANTalon(2);
        driveTrainFirstRight.setDistancePerPulse(StaticMembers.DISTANCE_PER_PULSE);
        driveTrainFirstRight.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainFirstRight.setPrecentTolerance(StaticMembers.PERCENT_TOLERANCE);
        LiveWindow.addActuator("DriveTrain", "FirstRight", driveTrainFirstRight);
        
        driveTrainSecondRight = new OnyxCANTalon(3);
        driveTrainSecondRight.setDistancePerPulse(StaticMembers.DISTANCE_PER_PULSE);
        driveTrainSecondRight.setAbsoluteTolerance(StaticMembers.ABSOLUTE_TOLERANCE);
        driveTrainSecondRight.setPrecentTolerance(StaticMembers.PERCENT_TOLERANCE);
        LiveWindow.addActuator("DriveTrain", "SecondRight", driveTrainSecondRight);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainFirstLeft, driveTrainSecondLeft,
              driveTrainFirstRight, driveTrainSecondRight);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        shooterAimingMotor = new OnyxCANTalon(5);
        LiveWindow.addActuator("Shooter", "AimingMotor", shooterAimingMotor);
        
        shooterShootingWheel = new OnyxCANTalon(4);
        LiveWindow.addActuator("Shooter", "ShootingWheel", shooterShootingWheel);
        
        driveTrainFirstLeft.setPID(0.07, 0.0, 0.03);
        driveTrainSecondLeft.setPID(0.07, 0.0, 0.03);
        driveTrainFirstRight.setPID(0.07, 0.0, 0.03);
        driveTrainSecondRight.setPID(0.07, 0.0, 0.03);
        
        VisionFirstLeftPIDController = new PIDController(1, 1, 1, Robot.vision, driveTrainFirstLeft);
        LiveWindow.addActuator("Vision", "LeftPIDController", VisionFirstLeftPIDController);
        VisionFirstLeftPIDController.setContinuous(false);
        VisionFirstLeftPIDController.setAbsoluteTolerance(3);
        VisionFirstLeftPIDController.setOutputRange(-0.4, 0.4);
        
        VisionSecondLeftPIDController = new PIDController(1, 1, 1, Robot.vision, driveTrainSecondLeft);
        LiveWindow.addActuator("Vision", "LeftPIDController1", VisionSecondLeftPIDController);
        VisionSecondLeftPIDController.setContinuous(false);
        VisionSecondLeftPIDController.setAbsoluteTolerance(3);
        VisionSecondLeftPIDController.setOutputRange(-0.4, 0.4);
        
        VisionFirstRightPIDController = new PIDController(1, 1, 1, Robot.vision, driveTrainFirstRight);
        LiveWindow.addActuator("Vision", "RightPIDController", VisionFirstRightPIDController);
        VisionFirstRightPIDController.setContinuous(false);
        VisionFirstRightPIDController.setAbsoluteTolerance(3);
        VisionFirstRightPIDController.setOutputRange(-0.4, 0.4);
        
        VisionSecondRightPIDController = new PIDController(1, 1, 1, Robot.vision, driveTrainSecondRight);
        LiveWindow.addActuator("Vision", "RightPIDController1", VisionSecondRightPIDController);
        VisionSecondRightPIDController.setContinuous(false);
        VisionSecondRightPIDController.setAbsoluteTolerance(3);
        VisionSecondRightPIDController.setOutputRange(-0.4, 0.4);
    }
}
