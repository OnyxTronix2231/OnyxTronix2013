// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2231.Robot2013.commands;

import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2231.Robot2013.Robot;
import org.usfirst.frc2231.Robot2013.RobotMap;
import org.usfirst.frc2231.Robot2013.StaticMembers;

import FRC_Vision2016_newMethods_ft_team2231.PIDVisionSourceType;

/**
 *
 */
public class DriveForwardByVision extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_setPoint;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveForwardByVision(double setPoint) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_setPoint = setPoint;

		// RobotBuilder Version: 2.0
		//
		// This file was generated by RobotBuilder. It contains sections of
		// code that are automatically generated and assigned by robotbuilder.
		// These sections will be updated in the future when you export to
		// Java from RobotBuilder. Do not put any code or make any change in
		// the blocks indicating autogenerated code or it will be lost on an
		// update. Deleting the comments indicating the section will prevent
		// it from being updated in the future.

		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize(){
		Robot.driveTrain.changeTalonControlMode(TalonControlMode.Follower);
		Robot.driveTrain.setTalonsReversedState(true);
		RobotMap.visionSensor.setPIDVisionSourceType(PIDVisionSourceType.DistanceFromTarget);
		RobotMap.visionSensor.refreshValues();		
		RobotMap.VisionDistanceLeftPIDController.setSetpoint(m_setPoint);
    	RobotMap.VisionDistanceRightPIDController.setSetpoint(m_setPoint);
    	if(RobotMap.VisionDistanceLeftPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_DISTANCE) && RobotMap.VisionDistanceRightPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_DISTANCE)){
    		return;
    	}
    	RobotMap.VisionDistanceLeftPIDController.enable();	
    	RobotMap.VisionDistanceRightPIDController.enable();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		RobotMap.visionSensor.refreshValues();
		System.out.println("Vision error: " + RobotMap.VisionDistanceLeftPIDController.getError() +  " , " + RobotMap.VisionDistanceRightPIDController.getError());
		System.out.println("vision, pidcontroller output: " + RobotMap.VisionDistanceLeftPIDController.get() + " , " + RobotMap.VisionDistanceRightPIDController.get());

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return RobotMap.VisionDistanceLeftPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_DISTANCE) && RobotMap.VisionDistanceRightPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_DISTANCE);
	}

	// Called once after isFinished returns true
	protected void end() {
		RobotMap.visionSensor.refreshValues();
    	System.out.println("pid Get" + RobotMap.visionSensor.pidGet());
		RobotMap.VisionDistanceLeftPIDController.reset();
    	RobotMap.VisionDistanceRightPIDController.reset();
		RobotMap.VisionDistanceLeftPIDController.disable();
		RobotMap.VisionDistanceRightPIDController.disable();
		Robot.driveTrain.setTalonsReversedState(false);
    	Robot.driveTrain.resetTalonControlMode();
		System.out.println("Drived to traget");
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
    	System.out.println("pid Get" + RobotMap.visionSensor.pidGet());
		RobotMap.VisionDistanceLeftPIDController.reset();
    	RobotMap.VisionDistanceRightPIDController.reset();
		RobotMap.VisionDistanceLeftPIDController.disable();
		RobotMap.VisionDistanceRightPIDController.disable();
    	Robot.driveTrain.resetTalonControlMode();
		Robot.driveTrain.setTalonsReversedState(false);
		System.out.println("Drive Forward By Vision Has Been Interupted");
	}
}
