// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013.commands;

import org.usfirst.frc2231.Robot2013.Robot;
import org.usfirst.frc2231.Robot2013.RobotMap;
import org.usfirst.frc2231.Robot2013.StaticMembers;

import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.command.Command;
import sensors.PIDVisionSourceType;
/**
 *
 */
public class CenterByVision extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	boolean hasStartedOnTarget = false;
	double m_setPoint;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CenterByVision(double setpoint) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	m_setPoint = setpoint;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.changeTalonControlMode(TalonControlMode.Follower);
		RobotMap.visionSensor.startProcessing(PIDVisionSourceType.NormalizedDistanceFromCenter, 2);
		hasStartedOnTarget = RobotMap.VisionRotateRightPIDController.init(m_setPoint, StaticMembers.ABSOLUTE_TOLERANCE_ROTATION)
							 && RobotMap.VisionRotateLeftPIDController.init(m_setPoint, StaticMembers.ABSOLUTE_TOLERANCE_ROTATION);
    }

    // Called repeatedly when this Command is scheduled to run
    int count = 0;
    protected void execute() {
    	//if(count == 4){
			System.out.println("Vision error: " + RobotMap.VisionRotateLeftPIDController.getError() +  " , " + RobotMap.VisionRotateRightPIDController.getError());
			System.out.println("vision, pidcontroller output: " + RobotMap.VisionRotateLeftPIDController.get() + " , " + RobotMap.VisionRotateRightPIDController.get());
			//count = 0;
    	//}
		//count ++;

    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	boolean isLeftOnTarget = RobotMap.VisionRotateLeftPIDController.onTarget();
    	boolean isRightOnTarget = RobotMap.VisionRotateRightPIDController.onTarget();
		return ((isLeftOnTarget && isRightOnTarget ) || hasStartedOnTarget) && RobotMap.visionSensor.hasTarget();    	
    
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("pid Get" + RobotMap.visionSensor.pidGet());
    	RobotMap.visionSensor.stopProcessing();
    	RobotMap.VisionRotateLeftPIDController.stop();
		RobotMap.VisionRotateRightPIDController.stop();
    	Robot.driveTrain.resetTalonControlMode();
		System.out.println("centered by vision");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	RobotMap.visionSensor.stopProcessing();
    	RobotMap.VisionRotateLeftPIDController.stop();
		RobotMap.VisionRotateRightPIDController.stop();
    	Robot.driveTrain.resetTalonControlMode();
    	System.out.println("center by vision has been interrupted");
    }
}
