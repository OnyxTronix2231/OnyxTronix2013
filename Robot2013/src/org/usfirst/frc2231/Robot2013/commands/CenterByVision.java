// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013.commands;

import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2231.Robot2013.Robot;
import org.usfirst.frc2231.Robot2013.RobotMap;
import org.usfirst.frc2231.Robot2013.StaticMembers;
import org.usfirst.frc2231.Robot2013.StickButtons;

import FRC_Vision2016_newMethods_ft_team2231.*;
/**
 *
 */
public class CenterByVision extends Command {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double m_setpoint;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CenterByVision(double setpoint) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	m_setpoint = setpoint;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.changeTalonControlModeToRotate(TalonControlMode.Follower);
    	RobotMap.visionSensor.setPIDVisionSourceType(PIDVisionSourceType.NormalizedDistanceFromCenter);
    	RobotMap.visionSensor.refreshValues();
    	RobotMap.VisionLeftPIDController.setSetpoint(m_setpoint);
    	RobotMap.VisionLeftPIDController.enable();	
    	RobotMap.VisionRightPIDController.setSetpoint(m_setpoint);
    	RobotMap.VisionRightPIDController.enable();	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	RobotMap.visionSensor.refreshValues();
    	System.out.println("Vision error: " + RobotMap.VisionLeftPIDController.getError() +  " , " + RobotMap.VisionRightPIDController.getError());
		System.out.println("vision, pidcontroller output: " + RobotMap.VisionLeftPIDController.get() + " , " + RobotMap.VisionRightPIDController.get());		    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
		return RobotMap.VisionLeftPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_ROTATION) &&
    			RobotMap.VisionRightPIDController.onTarget(StaticMembers.ABSOLUTE_TOLERANCE_ROTATION);    	
    
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.visionSensor.refreshValues();
    	System.out.println("pid Get" + RobotMap.visionSensor.pidGet());
		RobotMap.VisionLeftPIDController.reset();
    	RobotMap.VisionRightPIDController.reset();
		RobotMap.VisionLeftPIDController.disable();
		RobotMap.VisionRightPIDController.disable();
    	Robot.driveTrain.resetTalonControlMode();
		System.out.println("centered by vision");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
		RobotMap.VisionLeftPIDController.reset();
    	RobotMap.VisionRightPIDController.reset();
		RobotMap.VisionLeftPIDController.disable();
		RobotMap.VisionRightPIDController.disable();
    	Robot.driveTrain.resetTalonControlMode();
    	System.out.println("center by vision has been interrupted");
    }
}
