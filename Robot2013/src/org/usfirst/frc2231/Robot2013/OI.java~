// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.Robot2013;

import org.usfirst.frc2231.Robot2013.commands.ActivateTrigger;
import org.usfirst.frc2231.Robot2013.commands.AutonomousCommand;
import org.usfirst.frc2231.Robot2013.commands.CenterByVision;
import org.usfirst.frc2231.Robot2013.commands.ChangeBothHands;
import org.usfirst.frc2231.Robot2013.commands.ChangeLeftHand;
import org.usfirst.frc2231.Robot2013.commands.ChangeRightHand;
import org.usfirst.frc2231.Robot2013.commands.ActivateTrigger;
import org.usfirst.frc2231.Robot2013.commands.DriveWithJoystick;
import org.usfirst.frc2231.Robot2013.commands.PitchWithJoystick;
import org.usfirst.frc2231.Robot2013.commands.ShootAtMaxSpeed;
import org.usfirst.frc2231.Robot2013.commands.ShootBySpeed;
import org.usfirst.frc2231.Robot2013.commands.ShootByVision;
import org.usfirst.frc2231.Robot2013.commands.ShootBySpeed;
import org.usfirst.frc2231.Robot2013.commands.StartCompressor;
import org.usfirst.frc2231.Robot2013.commands.StopCompressor;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driveStick;
    public JoystickButton changeLeftHand;
    public JoystickButton changeRightHand;
    public JoystickButton changeBothHands;
    public JoystickButton startComp;
    public JoystickButton activeTrigger;
    public JoystickButton shoot;
    public JoystickButton centerOnTarget;
    public JoystickButton stopComp;
    public JoystickButton shootByVision;
    public Joystick buttonStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonStick = new Joystick(1);
        
        shootByVision = new JoystickButton(buttonStick, 9);
        shootByVision.whenPressed(new ShootByVision());
        stopComp = new JoystickButton(buttonStick, 7);
        stopComp.whileHeld(new StopCompressor());
        centerOnTarget = new JoystickButton(buttonStick, 4);
        centerOnTarget.whenPressed(new CenterByVision(-0.032));
        shoot = new JoystickButton(buttonStick, 5);
        shoot.whenPressed(new ShootAtMaxSpeed(5));
        activeTrigger = new JoystickButton(buttonStick, 6);
        activeTrigger.whenPressed(new ActivateTrigger(1));
        startComp = new JoystickButton(buttonStick, 8);
        startComp.whileHeld(new StartCompressor());
        changeBothHands = new JoystickButton(buttonStick, 1);
        changeBothHands.whileHeld(new ChangeBothHands());
        changeRightHand = new JoystickButton(buttonStick, 3);
        changeRightHand.whileHeld(new ChangeRightHand());
        changeLeftHand = new JoystickButton(buttonStick, 2);
        changeLeftHand.whileHeld(new ChangeLeftHand());
        driveStick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
        SmartDashboard.putData("StartCompressor", new StartCompressor());
        SmartDashboard.putData("StopCompressor", new StopCompressor());
        SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());
        SmartDashboard.putData("PitchWithJoystick", new PitchWithJoystick());
        SmartDashboard.putData("ShootAtMaxSpeed: default", new ShootAtMaxSpeed(2));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getbuttonStick() {
        return buttonStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

